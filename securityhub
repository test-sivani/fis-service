import boto3

def generate_cloudformation_connection_list(account_id, assumed_role_arn=None):
    if assumed_role_arn:
        sts_client = boto3.client('sts')
        assumed_role_arn = 'arn:aws:iam::'+account_id+':role/MTI-Monitoring-IAM-Assume-Role-us-west-2'
        assumed_role_object = sts_client.assume_role(
            RoleArn=assumed_role_arn,
            RoleSessionName="AssumeRoleSession"
        )
        credentials = assumed_role_object['Credentials']
        client = boto3.client('codestar-connections')
        connection_client = boto3.client(
            'codestar-connections',
            aws_access_key_id=credentials['AccessKeyId'],
            aws_secret_access_key=credentials['SecretAccessKey'],
            aws_session_token=credentials['SessionToken'],
            region_name = 'us-east-1'
        )
    else:
        # Using local IAM credentials
        connection_client = boto3.client('codestar-connections', region_name = 'us-east-1')
    
    try:
        response = connection_client.list_connections()
        print(response)
        return response.get('TypeSummaries', [])
        
          
    except Exception as e:
        print(f"Error generating connections for {account_id}: {e}")
        return []


def lambda_handler(event, context):
    #account_ids = ["558705036680", "191263280511", "267755604971", "697447276703"]
    account_ids = [
    "362703530058", "192371294981", "176172115626", "187987668104", "141307718982",
    "186571164904", "103125766920", "719763143537", "978388252944", "191263280511",
    "625420070620", "610703658746", "697447276703", "049974816207", "815049166683",
    "213063845714", "816858508076", "522382100432", "604459012978", "477252222774",
    "558705036680", "973797738916", "977858559465", "725150114023", "817368136624",
    "451273148086", "952913962705", "360045074645", "588715786456", "267755604971",
    "666700010316", "905418239190", "860384863489", "459684458936", "972494761097",
    "847951495994", "615151437316", "097488213276", "308668798985", "479661851765",
    "636284117084", "049255513783"
    ]
    assumed_role_arn = 'arn:aws:iam::TARGET_ACCOUNT_ID:role/ROLE_NAME' # Replace with target account ARN
    connections = []
    try:
        for account_id in account_ids:
               print(f"Processing account {account_id}")
               if account_id == context.invoked_function_arn.split(":")[4]: # Checking if current account ID
                   connections.extend(generate_cloudformation_connection_list(account_id)) # Using local credential
               else:
                   connections.extend(generate_cloudformation_connection_list(account_id, assumed_role_arn)) # Using cross-account role

    except Exception as e:
        print(f"Error processing: {e}")
        return {
            'statusCode': 500,
            'body': 'Error processing codestar connection details.'
        }

    return {
        'statusCode': 200,
        'body': 'Successfully retrived connection details.'
    }
